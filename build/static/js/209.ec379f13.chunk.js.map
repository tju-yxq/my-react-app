{"version":3,"file":"static/js/209.ec379f13.chunk.js","mappings":"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","sources":["mocks/handlers.js","mocks/browser.js"],"sourcesContent":["import { rest } from 'msw';\nimport { v4 as uuidv4 } from 'uuid'; // For generating tool_ids if needed\n\nconst mockUser = {\n  id: 1,\n  username: 'testuser',\n  email: 'test@example.com',\n  role: 'user',\n};\n\nconst mockSystemTools = [\n  {\n    tool_id: 'mcp_system_transfer',\n    name: 'System MCP Token Transfer',\n    description: 'System default token transfer using MCP.',\n    type: 'mcp',\n    provider: 'System',\n    server_name: 'mcp_server_1',\n    endpoint: { /* MCP specific endpoint config */ },\n    request_schema: { /* schema */ },\n    response_schema: { /* schema */ },\n    tags: ['system', 'mcp', 'finance'],\n    created_at: '2024-01-15T10:00:00Z',\n    rating: 4.5,\n  },\n  {\n    tool_id: 'http_system_weather',\n    name: 'System HTTP Weather API',\n    description: 'System default weather service.',\n    type: 'http',\n    provider: 'System',\n    endpoint: {\n      url: 'https://api.weather.example.com/system',\n      method: 'GET',\n      platform_type: 'generic_http',\n    },\n    request_schema: { type: 'object', properties: { city: { type: 'string' } }, required: ['city'] },\n    response_schema: { /* schema */ },\n    tags: ['system', 'http', 'weather'],\n    created_at: '2024-02-20T11:00:00Z',\n    rating: 4.2,\n  },\n  {\n    tool_id: 'dev_tool_translator',\n    name: 'Advanced Translator (Dev)',\n    description: 'Community-provided translation service with more languages.',\n    type: 'http',\n    provider: 'DeveloperCommunity',\n    isDeveloperTool: true,\n    endpoint: {\n      url: 'https://api.devtranslate.example.com/translate',\n      method: 'POST',\n      platform_type: 'generic_http',\n    },\n    request_schema: { type: 'object', properties: { text: { type: 'string' }, target_lang: { type: 'string' } }, required: ['text', 'target_lang'] },\n    response_schema: { /* schema */ },\n    tags: ['developer', 'http', 'translation', 'ai'],\n    created_at: '2024-05-01T15:30:00Z',\n    rating: 4.8,\n  },\n  {\n    tool_id: 'dev_tool_imagegen',\n    name: 'AI Image Generator (Dev)',\n    description: 'Generate images from text prompts, by a third-party dev.',\n    type: 'http',\n    provider: 'ArtAIProvider',\n    isDeveloperTool: true,\n    endpoint: {\n      url: 'https://api.ai-image.example.com/generate',\n      method: 'POST',\n      platform_type: 'generic_http',\n    },\n    request_schema: { type: 'object', properties: { prompt: { type: 'string' } }, required: ['prompt'] },\n    response_schema: { /* schema */ },\n    tags: ['developer', 'http', 'image', 'generation', 'creative'],\n    created_at: '2024-04-10T09:00:00Z',\n    rating: 4.9,\n  },\n  {\n    tool_id: 'system_music_player',\n    name: 'Smart Music Player',\n    description: 'Intelligent music streaming service with voice control and personalized recommendations.',\n    type: 'http',\n    provider: 'System',\n    endpoint: {\n      url: 'https://api.music.example.com/player',\n      method: 'POST',\n      platform_type: 'generic_http',\n    },\n    request_schema: { type: 'object', properties: { action: { type: 'string' }, song: { type: 'string' }, artist: { type: 'string' } }, required: ['action'] },\n    response_schema: { /* schema */ },\n    tags: ['system', 'http', 'music', 'entertainment', 'voice-control'],\n    created_at: '2024-03-25T14:20:00Z',\n    rating: 4.6,\n  }\n];\n\n// Database for developer-specific tools\nlet developerToolsDb = [\n  {\n    tool_id: 'dev_owned_dify_app_123',\n    name: 'My Custom Dify App (Dev)',\n    description: 'A Dify application integrated by the developer.',\n    type: 'http',\n    provider: 'devuser',\n    isDeveloperTool: true,\n    status: 'enabled',\n    endpoint: {\n      url: 'https://dify.example.com/api/dev-app-1/completion-messages',\n      method: 'POST',\n      platform_type: 'dify',\n      authentication: { type: 'bearer', token: 'dify-secret-token-dev1' },\n      dify_config: {\n        app_id: 'dify-app-id-123', // Example app_id\n        user_query_variable: 'query',\n        fixed_inputs: { \"scene_mode\": \"chat\" }\n      }\n    },\n    documentation: 'This is a Dify app for testing. Input: query (string). Output: text response.',\n    request_schema: {},\n    response_schema: {},\n    tags: ['developer', 'http', 'dify', 'custom'],\n    created_at: '2024-05-15T10:00:00Z',\n    rating: 0,\n  },\n  {\n    tool_id: 'dev_owned_coze_bot_456',\n    name: 'Personal Coze Bot (Dev)',\n    description: 'A Coze bot for personal assistance, by the developer.',\n    type: 'http',\n    provider: 'devuser',\n    isDeveloperTool: true,\n    status: 'disabled',\n    endpoint: {\n      url: 'https://coze.example.com/api/v2/chat',\n      method: 'POST',\n      platform_type: 'coze',\n      authentication: { type: 'api_key', key_name: 'Authorization', api_key: 'Bearer coze-secret-key-dev1' },\n      coze_config: {\n        bot_id: 'coze-bot-xyz789',\n        user_query_variable: 'query'\n      }\n    },\n    documentation: 'This is a Coze bot. Input: query (string). Output: chat message.',\n    request_schema: {},\n    response_schema: {},\n    tags: ['developer', 'http', 'coze', 'chatbot'],\n    created_at: '2024-05-16T11:30:00Z',\n    rating: 0,\n  }\n];\n\nexport const handlers = [\n  // Authentication\n  rest.post('/auth/register', async (req, res, ctx) => {\n    const { username, email, password } = await req.json();\n    if (!username || !email || !password) {\n      return res(ctx.status(400), ctx.json({ error: { code: 'INVALID_PARAM', msg: 'Missing fields' } }));\n    }\n    // Check for existing user (for testing error cases)\n    if (email === 'existing@example.com') {\n      return res(ctx.status(400), ctx.json({ error: { code: 'VALIDATION_ERROR', msg: 'Email already exists' } }));\n    }\n    // Simulate successful registration with token\n    return res(\n      ctx.status(201),\n      ctx.json({\n        token: 'fake-jwt-register-token-string',\n        user: {\n          id: Math.floor(Math.random() * 1000),\n          username,\n          email,\n          role: 'user'\n        }\n      })\n    );\n  }),\n\n  rest.post('/auth/login', async (req, res, ctx) => {\n    const { username, password } = await req.json();\n    if (username === 'testuser' && password === 'password') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          token: 'abc',  // 符合文档要求的token值\n          user: mockUser,\n        })\n      );\n    } else if (username === 'devuser' && password === 'password') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          token: 'abc-dev',  // 开发者token保持区别但简化\n          user: { ...mockUser, id: 2, username: 'devuser', role: 'developer' }\n        })\n      );\n    } else {\n      return res(\n        ctx.status(401),\n        ctx.json({ error: { code: 'AUTH_FAILED', msg: 'Invalid credentials' } })\n      );\n    }\n  }),\n\n  // Mock getUserInfo API\n  rest.get('/api/auth/me', (req, res, ctx) => {\n    const authToken = req.headers.get('Authorization');\n\n    if (!authToken || !authToken.startsWith('Bearer ')) {\n      return res(ctx.status(401), ctx.json({ error: { code: 'UNAUTHORIZED', msg: 'No token provided' } }));\n    }\n\n    const token = authToken.replace('Bearer ', '');\n\n    // Mock user based on token\n    if (token === 'abc-dev') {  // 更新为新的开发者token\n      return res(\n        ctx.status(200),\n        ctx.json({\n          success: true,\n          user: {\n            id: 2,\n            username: 'devuser',\n            email: 'dev@example.com',\n            role: 'developer'\n          }\n        })\n      );\n    } else if (token === 'abc') {  // 更新为新的用户token\n      return res(\n        ctx.status(200),\n        ctx.json({\n          success: true,\n          user: {\n            id: 1,\n            username: 'testuser',\n            email: 'test@example.com',\n            role: 'user'\n          }\n        })\n      );\n    }\n\n    return res(ctx.status(401), ctx.json({ error: { code: 'INVALID_TOKEN', msg: 'Invalid token' } }));\n  }),\n\n  // MOCK GET ALL SERVICES (服务列表) - 支持分页\n  rest.get('/api/services', (req, res, ctx) => {\n    const page = parseInt(req.url.searchParams.get('page')) || 1;\n    const pageSize = parseInt(req.url.searchParams.get('page_size')) || 10;\n\n    console.log(`MSW intercepted GET /api/services - 页码: ${page}, 每页数量: ${pageSize}`);\n\n    // 计算分页\n    const totalItems = mockSystemTools.length;\n    const totalPages = Math.ceil(totalItems / pageSize);\n    const startIndex = (page - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const itemsForPage = mockSystemTools.slice(startIndex, endIndex);\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        items: itemsForPage,\n        current_page: page,\n        total_pages: totalPages,\n        total_items: totalItems,\n        page_size: pageSize,\n        has_next: page < totalPages,\n        has_prev: page > 1\n      })\n    );\n  }),\n\n  // Core API\n  rest.post('/api/interpret', async (req, res, ctx) => {\n    const { sessionId, userId, query } = await req.json(); // Changed text to query\n    if (!sessionId || userId === undefined || !query) {\n      return res(ctx.status(400), ctx.json({ error: { code: 'INVALID_PARAM', msg: 'Missing fields for interpret' } }));\n    }\n\n    // 简单的STT识别结果处理 - 直接返回\"你好\"作为响应\n    console.log(`MSW intercepted interpret request with query: \"${query}\"`);\n\n    // 检查是否是简单的问候语或测试语音输入\n    const lowerText = query.toLowerCase();\n    if (lowerText.includes('你好') || lowerText.includes('hello') || lowerText.includes('hi') || query.trim().length < 10) {\n      // 对于简单问候语，直接返回友好回应，不需要工具调用\n      return res(\n        ctx.status(200),\n        ctx.json({\n          sessionId,\n          action: 'respond',\n          content: '你好！我是你的语音助手，很高兴为你服务。你可以问我任何问题或请求帮助。',\n          type: 'direct_response'\n        })\n      );\n    }\n\n    let action = 'unknown_tool';\n    let params = {};\n    let confirmText = `我理解了：\"${query}\"。这样对吗？`;\n\n    if (lowerText.includes('transfer') || lowerText.includes('转账') || lowerText.includes('mcp')) {\n      action = mockSystemTools.find(t => t.tool_id === 'mcp_system_transfer').tool_id;\n      params = { amount: 100, currency: 'ETH', recipient: '0x123...' };\n      confirmText = `你想要使用MCP转账100 ETH到0x123...吗？`;\n    } else if (lowerText.includes('weather') || lowerText.includes('天气')) {\n      action = mockSystemTools.find(t => t.tool_id === 'http_system_weather').tool_id;\n      params = { city: 'Beijing' };\n      confirmText = `要查询北京的天气吗？`;\n    } else if (lowerText.includes('translate') || lowerText.includes('翻译') || lowerText.includes('translator')) {\n      action = mockSystemTools.find(t => t.tool_id === 'dev_tool_translator').tool_id;\n      params = { text: '你好世界', target_lang: 'en' };\n      confirmText = `要将\"你好世界\"翻译成英文吗？`;\n    } else if (lowerText.includes('image') || lowerText.includes('图片') || lowerText.includes('generate picture') || lowerText.includes('生成图片')) {\n      action = mockSystemTools.find(t => t.tool_id === 'dev_tool_imagegen').tool_id;\n      params = { prompt: '一只戴帽子的猫' };\n      confirmText = `要生成一张戴帽子的猫的图片吗？`;\n    } else if (lowerText.includes('music') || lowerText.includes('音乐') || lowerText.includes('play') || lowerText.includes('播放') || lowerText.includes('song') || lowerText.includes('歌曲')) {\n      action = mockSystemTools.find(t => t.tool_id === 'system_music_player').tool_id;\n      params = { action: 'play', song: '流行歌曲', artist: '各种艺术家' };\n      confirmText = `要为你播放一些音乐吗？`;\n    } else {\n      // Try to match against developer tools if no system tool matches\n      const devToolMatch = developerToolsDb.find(tool => lowerText.includes(tool.name.toLowerCase().split(' ')[0]));\n      if (devToolMatch) {\n        action = devToolMatch.tool_id;\n        // For simplicity, let's assume all dev tools take a generic 'input' param for now\n        params = { input: query };\n        confirmText = `要使用'${devToolMatch.name}'服务处理你的查询：\"${query}\"吗？`;\n      }\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        sessionId,\n        tool_calls: [{\n          tool_id: action,\n          parameters: params\n        }],\n        confirm_text: confirmText,\n        type: 'tool_call_required'\n      })\n    );\n  }),\n\n  rest.post('/api/v1/execute', async (req, res, ctx) => {\n    const { sessionId, userId, tool_id, params } = await req.json();\n    if (!sessionId || !tool_id || !params) {\n      return res(ctx.status(400), ctx.json({ error: { code: 'INVALID_PARAM', msg: 'Missing fields for execute' } }));\n    }\n\n    const tool = [...mockSystemTools, ...developerToolsDb].find(t => t.tool_id === tool_id);\n    if (!tool) {\n      return res(ctx.status(404), ctx.json({ error: { code: 'TOOL_NOT_FOUND', msg: `Tool ${tool_id} not found` } }));\n    }\n\n    if (tool.isDeveloperTool && tool.status === 'disabled') {\n      return res(ctx.status(403), ctx.json({ error: { code: 'TOOL_DISABLED', msg: `Tool ${tool_id} is currently disabled by the developer.` } }));\n    }\n\n    let responseData = {};\n    // Simulate execution based on tool type or platform_type\n    if (tool.type === 'mcp') {\n      responseData = { success: true, data: { transactionHash: `0x_mcp_tx_${Date.now()}`, message: `MCP call to ${tool.name} successful.` } };\n    } else if (tool.type === 'http') {\n      if (tool.endpoint?.platform_type === 'dify') {\n        responseData = { success: true, data: { answer: `Dify app '${tool.name}' processed '${params[tool.endpoint.dify_config?.user_query_variable || 'query']}'. Mocked response.`, conversation_id: `dify_conv_${Date.now()}` } };\n      } else if (tool.endpoint?.platform_type === 'coze') {\n        responseData = { success: true, data: { answer: `Coze bot '${tool.name}' responded to '${params[tool.endpoint.coze_config?.user_query_variable || 'query']}'. This is a mock.`, conversation_id: `coze_conv_${Date.now()}` } };\n      } else if (tool.tool_id === 'system_music_player') {\n        // Special handling for music player\n        const action = params.action || 'play';\n        const song = params.song || 'Unknown Song';\n        const artist = params.artist || 'Unknown Artist';\n        responseData = {\n          success: true,\n          data: {\n            message: `🎵 Music Player: ${action === 'play' ? 'Now playing' : action} \"${song}\" by ${artist}`,\n            status: 'playing',\n            track: { title: song, artist: artist, duration: '3:42' },\n            volume: 75\n          }\n        };\n      } else { // Generic HTTP\n        responseData = { success: true, data: { message: `HTTP call to ${tool.name} successful. Input was: ${JSON.stringify(params)}` } };\n      }\n    } else {\n      responseData = { success: false, error: { code: 'UNKNOWN_TOOL_TYPE', msg: `Tool type ${tool.type} not supported for execution.` } };\n    }\n\n    return res(ctx.status(200), ctx.json({ sessionId, ...responseData }));\n  }),\n\n  // Developer API Endpoints\n  rest.get('/api/dev/tools', (req, res, ctx) => {\n    // This should ideally be user-specific, but for mock, return all dev tools\n    return res(ctx.status(200), ctx.json({ tools: developerToolsDb }));\n  }),\n\n  rest.post('/api/dev/tools', async (req, res, ctx) => {\n    const serviceData = await req.json();\n    const newTool = {\n      tool_id: `dev_tool_${uuidv4().slice(0, 8)}`,\n      provider: 'devuser', // Assuming current authenticated user is the provider\n      isDeveloperTool: true,\n      status: 'enabled', // Default to enabled\n      created_at: new Date().toISOString(),\n      rating: 0,\n      tags: serviceData.tags || ['custom', serviceData.platformType || 'http'],\n      // Carry over all relevant fields from serviceData\n      name: serviceData.serviceName,\n      description: serviceData.serviceDescription,\n      type: 'http', // All dev tools are HTTP for now in this mock\n      endpoint: {\n        url: serviceData.endpointUrl,\n        method: serviceData.method || 'POST', // Default to POST if not provided\n        platform_type: serviceData.platformType,\n        authentication: { type: 'bearer', token: serviceData.apiKey }, // Simplify auth for mock\n        // Add platform-specific configs if they exist\n        ...(serviceData.platformType === 'dify' && { dify_config: { app_id: serviceData.difyAppId, user_query_variable: serviceData.userInputVar } }),\n        ...(serviceData.platformType === 'coze' && { coze_config: { bot_id: serviceData.cozeBotId, user_query_variable: serviceData.userInputVar } }),\n      },\n      documentation: serviceData.documentation, // Save documentation\n      // request_schema and response_schema can be added later if needed for dev tools\n    };\n    developerToolsDb.push(newTool);\n    return res(ctx.status(201), ctx.json({\n      message: `服务 \"${serviceData.serviceName}\" 已成功创建！`,\n      tool: newTool\n    }));\n  }),\n\n  rest.put('/api/dev/tools/:toolId', async (req, res, ctx) => {\n    const { toolId } = req.params;\n    const updateData = await req.json();\n    const toolIndex = developerToolsDb.findIndex(t => t.tool_id === toolId);\n    if (toolIndex === -1) {\n      return res(ctx.status(404), ctx.json({ error: 'Tool not found' }));\n    }\n    // Only allow status updates for simplicity in mock\n    if (updateData.status) {\n      developerToolsDb[toolIndex].status = updateData.status;\n    }\n    // Could extend to update other fields if necessary\n    return res(ctx.status(200), ctx.json(developerToolsDb[toolIndex]));\n  }),\n\n  rest.delete('/api/dev/tools/:toolId', (req, res, ctx) => {\n    const { toolId } = req.params;\n    const initialLength = developerToolsDb.length;\n    developerToolsDb = developerToolsDb.filter(t => t.tool_id !== toolId);\n    if (developerToolsDb.length < initialLength) {\n      return res(ctx.status(200), ctx.json({ message: 'Tool deleted successfully' }));\n    }\n    return res(ctx.status(404), ctx.json({ error: 'Tool not found for deletion' }));\n  }),\n\n  // NEW: Mock for testing an unsaved developer tool configuration\n  rest.post('/api/dev/tools/test', async (req, res, ctx) => {\n    const requestData = await req.json();\n    console.log('Testing tool config:', JSON.stringify(requestData, null, 2));\n\n    const { tool_config, test_input } = requestData;\n    const testInput = test_input;\n\n    if (!testInput || testInput.trim() === '') {\n      return res(ctx.status(400), ctx.json({ success: false, error: 'Test input is required.' }));\n    }\n\n    const { platform_type: platformType, authentication, dify_config, coze_config, endpoint_config } = tool_config || {};\n    const apiKey = authentication?.token;\n    const difyAppId = dify_config?.app_id;\n    const cozeBotId = coze_config?.bot_id;\n    const endpointUrl = endpoint_config?.url;\n\n    let responseData = { success: false, error: 'Unknown platform or configuration error.', raw_response: null };\n\n    if (platformType === 'dify') {\n      if (apiKey && difyAppId && endpointUrl) {\n        responseData = {\n          success: true,\n          message: 'Dify API test successful!',\n          raw_response: {\n            dify_answer: `Mock Dify response for '${testInput}' using app ${difyAppId}. This is a simulated test.`,\n            conversation_id: `test_dify_conv_${uuidv4()}`,\n          }\n        };\n      } else {\n        responseData.error = 'Dify configuration incomplete (API Key, App ID, or URL missing).';\n      }\n    } else if (platformType === 'coze') {\n      if (apiKey && cozeBotId && endpointUrl) {\n        responseData = {\n          success: true,\n          message: 'Coze API test successful!',\n          raw_response: {\n            coze_message: `Mock Coze bot ${cozeBotId} response for '${testInput}'. Simulation successful.`,\n            messages: [{ type: 'answer', content: `Mocked Coze: ${testInput}` }],\n            conversation_id: `test_coze_conv_${uuidv4()}`,\n          }\n        };\n      } else {\n        responseData.error = 'Coze configuration incomplete (API Key, Bot ID, or URL missing).';\n      }\n    } else if (platformType === 'http') {\n      if (apiKey && endpointUrl) {\n        responseData = {\n          success: true,\n          message: 'Generic HTTP API test successful!',\n          raw_response: {\n            generic_http_data: `Mock generic HTTP response for input '${testInput}' to URL ${endpointUrl}. Test OK.`,\n            status_code: 200\n          }\n        };\n      } else {\n        responseData.error = 'Generic HTTP configuration incomplete (API Key or URL missing).';\n      }\n    } else {\n      responseData.error = `Platform type '${platformType}' not supported for testing in mock.`;\n    }\n    await new Promise(resolve => setTimeout(resolve, 750)); // Simulate network delay\n    return res(ctx.status(200), ctx.json(responseData));\n  }),\n\n  // Example for /api/dev/upload (placeholder)\n  rest.post('/api/dev/upload', (req, res, ctx) => {\n    // This would normally handle file uploads. For mock, just acknowledge.\n    return res(ctx.status(200), ctx.json({ message: 'File upload acknowledged (mock)' }));\n  }),\n];\n\n// Helper to simulate getting the authenticated user's ID or context if needed later\n// function getAuthenticatedDeveloperId(req) {\n//   // In a real scenario, you'd inspect the Authorization header or session\n//   // For now, we can assume a fixed developer ID or a mock mechanism\n//   const authToken = req.headers.get('Authorization');\n//   if (authToken === 'Bearer fake-jwt-developer-token-string') {\n//       return 2; // Matches devuser in login mock\n//   }\n//   return null; \n// } ","import { setupWorker } from 'msw';\nimport { handlers } from './handlers';\n \n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers); "],"names":["mockUser","id","username","email","role","mockSystemTools","tool_id","name","description","type","provider","server_name","endpoint","request_schema","response_schema","tags","created_at","rating","url","method","platform_type","properties","city","required","isDeveloperTool","text","target_lang","prompt","action","song","artist","developerToolsDb","status","authentication","token","dify_config","app_id","user_query_variable","fixed_inputs","documentation","key_name","api_key","coze_config","bot_id","handlers","rest","post","async","req","res","ctx","password","json","error","code","msg","user","Math","floor","random","get","authToken","headers","startsWith","replace","success","page","parseInt","searchParams","pageSize","console","log","totalItems","length","totalPages","ceil","startIndex","endIndex","itemsForPage","slice","items","current_page","total_pages","total_items","page_size","has_next","has_prev","sessionId","userId","query","undefined","lowerText","toLowerCase","includes","trim","content","params","confirmText","find","t","amount","currency","recipient","devToolMatch","tool","split","input","tool_calls","parameters","confirm_text","responseData","data","transactionHash","Date","now","message","_tool$endpoint","_tool$endpoint2","_tool$endpoint$dify_c","answer","conversation_id","_tool$endpoint$coze_c","track","title","duration","volume","JSON","stringify","tools","serviceData","newTool","uuidv4","toISOString","platformType","serviceName","serviceDescription","endpointUrl","apiKey","difyAppId","userInputVar","cozeBotId","push","put","toolId","updateData","toolIndex","findIndex","delete","initialLength","filter","requestData","tool_config","test_input","testInput","endpoint_config","raw_response","dify_answer","coze_message","messages","generic_http_data","status_code","Promise","resolve","setTimeout","worker","setupWorker"],"sourceRoot":""}